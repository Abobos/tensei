// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generates all routes for REST api 1`] = `
Object {
  "components": Object {
    "securitySchemes": Object {
      "bearerAuth": Object {
        "bearerFormat": "JWT",
        "scheme": "bearer",
      },
    },
  },
  "definitions": Object {
    "Comment": Object {
      "properties": Object {
        "created_at": Object {
          "description": "",
          "format": "date",
          "type": "string",
        },
        "title_hidden_from_insert_and_fetch_api": Object {
          "description": "",
          "format": "string",
          "type": "string",
        },
        "title_hidden_from_update_and_fetch_api": Object {
          "description": "",
          "format": "string",
          "type": "string",
        },
        "updated_at": Object {
          "description": "",
          "format": "date",
          "type": "string",
        },
      },
      "type": "object",
    },
    "CommentFetchResponse": Object {
      "properties": Object {
        "data": Object {
          "items": Object {
            "$ref": "#/definitions/Comment",
          },
          "type": "array",
        },
        "meta": Object {
          "$ref": "#/definitions/PaginationMeta",
          "type": "object",
        },
      },
      "type": "object",
    },
    "CommentInput": Object {
      "properties": Object {
        "body": Object {
          "description": "",
          "format": "string",
          "type": "string",
        },
        "post": Object {
          "$ref": "#/definitions/ID",
          "description": "",
        },
        "title": Object {
          "description": "",
          "format": "string",
          "type": "string",
        },
      },
      "required": Array [
        "id",
        "title",
        "body",
        "title_hidden_from_insert_and_fetch_api",
        "title_hidden_from_update_and_fetch_api",
        "post",
      ],
      "type": "object",
    },
    "ID": Object {
      "type": "string",
    },
    "LoginInput": Object {
      "properties": Object {
        "email": Object {
          "format": "email",
          "required": true,
          "type": "string",
        },
        "password": Object {
          "required": true,
          "type": "string",
        },
      },
      "type": "object",
    },
    "PaginationMeta": Object {
      "properties": Object {
        "page": Object {
          "type": "integer",
        },
        "page_count": Object {
          "type": "integer",
        },
        "per_page": Object {
          "type": "integer",
        },
        "total": Object {
          "type": "integer",
        },
      },
      "type": "object",
    },
    "Post": Object {
      "properties": Object {
        "created_at": Object {
          "description": "",
          "format": "date",
          "type": "string",
        },
        "updated_at": Object {
          "description": "",
          "format": "date",
          "type": "string",
        },
      },
      "type": "object",
    },
    "PostFetchResponse": Object {
      "properties": Object {
        "data": Object {
          "items": Object {
            "$ref": "#/definitions/Post",
          },
          "type": "array",
        },
        "meta": Object {
          "$ref": "#/definitions/PaginationMeta",
          "type": "object",
        },
      },
      "type": "object",
    },
    "PostInput": Object {
      "properties": Object {
        "approved": Object {
          "description": "",
          "type": "boolean",
        },
        "av_cpc": Object {
          "description": "",
          "format": "int32",
          "type": "integer",
        },
        "category": Object {
          "description": "",
          "enum": Array [
            "javascript",
            "angular",
            "mysql",
            "pg",
          ],
          "format": "string",
          "type": "string",
        },
        "comments": Object {
          "description": "",
          "items": Object {
            "$ref": "#/definitions/ID",
          },
          "type": "array",
        },
        "content": Object {
          "description": "",
          "format": "string",
          "type": "string",
        },
        "description": Object {
          "description": "",
          "format": "string",
          "type": "string",
        },
        "published_at": Object {
          "description": "",
          "format": "date",
          "type": "string",
        },
        "scheduled_for": Object {
          "description": "",
          "format": "date",
          "type": "string",
        },
        "tags": Object {
          "description": "",
          "items": Object {
            "$ref": "#/definitions/ID",
          },
          "type": "array",
        },
        "title": Object {
          "description": "",
          "format": "string",
          "type": "string",
        },
        "user": Object {
          "$ref": "#/definitions/ID",
          "description": "",
        },
      },
      "required": Array [
        "id",
        "title",
        "description",
        "content",
        "av_cpc",
        "category",
        "user",
        "published_at",
        "approved",
        "scheduled_for",
      ],
      "type": "object",
    },
    "Reaction": Object {
      "properties": Object {
        "created_at": Object {
          "description": "",
          "format": "date",
          "type": "string",
        },
        "updated_at": Object {
          "description": "",
          "format": "date",
          "type": "string",
        },
      },
      "type": "object",
    },
    "ReactionFetchResponse": Object {
      "properties": Object {
        "data": Object {
          "items": Object {
            "$ref": "#/definitions/Reaction",
          },
          "type": "array",
        },
        "meta": Object {
          "$ref": "#/definitions/PaginationMeta",
          "type": "object",
        },
      },
      "type": "object",
    },
    "ReactionInput": Object {
      "properties": Object {
        "like": Object {
          "description": "",
          "type": "boolean",
        },
      },
      "required": Array [
        "id",
        "like",
      ],
      "type": "object",
    },
    "RegisterInput": Object {
      "properties": Object {
        "email": Object {
          "format": "email",
          "required": true,
          "type": "string",
        },
        "password": Object {
          "required": true,
          "type": "string",
        },
      },
      "type": "object",
    },
    "RequestPasswordInput": Object {
      "properties": Object {
        "email": Object {
          "format": "email",
          "required": true,
          "type": "string",
        },
      },
    },
    "ResetPasswordInput": Object {
      "properties": Object {
        "password": Object {
          "required": true,
          "type": "string",
        },
        "token": Object {
          "description": "This token was sent to the admin-user's email. Provide it here to reset the admin-user's password.",
          "required": true,
          "type": "string",
        },
      },
    },
    "Tag": Object {
      "properties": Object {
        "created_at": Object {
          "description": "",
          "format": "date",
          "type": "string",
        },
        "updated_at": Object {
          "description": "",
          "format": "date",
          "type": "string",
        },
      },
      "type": "object",
    },
    "TagFetchResponse": Object {
      "properties": Object {
        "data": Object {
          "items": Object {
            "$ref": "#/definitions/Tag",
          },
          "type": "array",
        },
        "meta": Object {
          "$ref": "#/definitions/PaginationMeta",
          "type": "object",
        },
      },
      "type": "object",
    },
    "TagInput": Object {
      "properties": Object {
        "description": Object {
          "description": "",
          "format": "string",
          "type": "string",
        },
        "name": Object {
          "description": "",
          "format": "string",
          "type": "string",
        },
        "posts": Object {
          "description": "",
          "items": Object {
            "$ref": "#/definitions/ID",
          },
          "type": "array",
        },
        "priority": Object {
          "description": "",
          "format": "int32",
          "type": "integer",
        },
      },
      "required": Array [
        "id",
        "name",
        "description",
      ],
      "type": "object",
    },
    "User": Object {
      "properties": Object {
        "created_at": Object {
          "description": "",
          "format": "date",
          "type": "string",
        },
        "updated_at": Object {
          "description": "",
          "format": "date",
          "type": "string",
        },
      },
      "type": "object",
    },
    "UserFetchResponse": Object {
      "properties": Object {
        "data": Object {
          "items": Object {
            "$ref": "#/definitions/User",
          },
          "type": "array",
        },
        "meta": Object {
          "$ref": "#/definitions/PaginationMeta",
          "type": "object",
        },
      },
      "type": "object",
    },
    "UserInput": Object {
      "properties": Object {
        "email": Object {
          "description": "",
          "format": "string",
          "type": "string",
        },
        "full_name": Object {
          "description": "",
          "format": "string",
          "type": "string",
        },
        "password": Object {
          "description": "",
          "format": "string",
          "type": "string",
        },
        "posts": Object {
          "description": "",
          "items": Object {
            "$ref": "#/definitions/ID",
          },
          "type": "array",
        },
      },
      "required": Array [
        "id",
        "full_name",
        "email",
        "password",
      ],
      "type": "object",
    },
  },
  "info": Object {
    "contact": Object {},
    "license": Object {},
  },
  "paths": Object {
    "admin/auth/login": Object {
      "post": Object {
        "consumes": Array [
          "application/json",
        ],
        "definitions": Object {
          "LoginInput": Object {
            "properties": Object {
              "email": Object {
                "format": "email",
                "required": true,
                "type": "string",
              },
              "password": Object {
                "required": true,
                "type": "string",
              },
            },
            "type": "object",
          },
        },
        "parameters": Array [
          Object {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": Object {
              "$ref": "#/definitions/LoginInput",
            },
            "type": "object",
          },
        ],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "500": Object {
            "description": "Server error.",
          },
        },
        "summary": "Login an existing admin-user.",
        "tags": Array [
          "Auth",
        ],
      },
    },
    "admin/auth/me": Object {
      "get": Object {
        "consumes": Array [
          "application/json",
        ],
        "parameters": Array [],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "500": Object {
            "description": "Server error.",
          },
        },
        "security": Array [
          Object {
            "Bearer": Array [],
          },
        ],
        "summary": "Get the authenticated admin-user from a valid JWT.",
        "tags": Array [
          "Auth",
        ],
      },
    },
    "admin/auth/passwords/email": Object {
      "post": Object {
        "consumes": Array [
          "application/json",
        ],
        "definitions": Object {
          "RequestPasswordInput": Object {
            "properties": Object {
              "email": Object {
                "format": "email",
                "required": true,
                "type": "string",
              },
            },
          },
        },
        "parameters": Array [
          Object {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": Object {
              "$ref": "#/definitions/RequestPasswordInput",
            },
            "type": "object",
          },
        ],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "500": Object {
            "description": "Server error.",
          },
        },
        "summary": "Request a password reset for a admin-user using the admin-user email.",
        "tags": Array [
          "Auth",
        ],
      },
    },
    "admin/auth/passwords/reset": Object {
      "post": Object {
        "consumes": Array [
          "application/json",
        ],
        "definitions": Object {
          "ResetPasswordInput": Object {
            "properties": Object {
              "password": Object {
                "required": true,
                "type": "string",
              },
              "token": Object {
                "description": "This token was sent to the admin-user's email. Provide it here to reset the admin-user's password.",
                "required": true,
                "type": "string",
              },
            },
          },
        },
        "parameters": Array [
          Object {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": Object {
              "$ref": "#/definitions/ResetPasswordInput",
            },
            "type": "object",
          },
        ],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "500": Object {
            "description": "Server error.",
          },
        },
        "summary": "Reset a admin-user password using a password reset token.",
        "tags": Array [
          "Auth",
        ],
      },
    },
    "admin/auth/refresh-token": Object {
      "delete": Object {
        "consumes": Array [
          "application/json",
        ],
        "description": "Sets the refresh token cookie to an invalid value and expires it.",
        "parameters": Array [
          Object {
            "in": "cookie",
            "name": "___refresh__token",
            "required": true,
          },
        ],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "500": Object {
            "description": "Server error.",
          },
        },
        "summary": "Invalidate a refresh token.",
        "tags": Array [
          "Auth",
        ],
      },
      "post": Object {
        "consumes": Array [
          "application/json",
        ],
        "description": "The refresh token is set in cookies response for all endpoints that return an access token (login, register).",
        "parameters": Array [
          Object {
            "in": "cookie",
            "name": "___refresh__token",
            "required": true,
          },
        ],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "500": Object {
            "description": "Server error.",
          },
        },
        "summary": "Request a new (access token) using a refresh token.",
        "tags": Array [
          "Auth",
        ],
      },
    },
    "admin/auth/register": Object {
      "post": Object {
        "consumes": Array [
          "application/json",
        ],
        "definitions": Object {
          "RegisterInput": Object {
            "properties": Object {
              "email": Object {
                "format": "email",
                "required": true,
                "type": "string",
              },
              "password": Object {
                "required": true,
                "type": "string",
              },
            },
            "type": "object",
          },
        },
        "parameters": Array [
          Object {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": Object {
              "$ref": "#/definitions/RegisterInput",
            },
            "type": "object",
          },
        ],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "500": Object {
            "description": "Server error.",
          },
        },
        "summary": "Register a new admin-user.",
        "tags": Array [
          "Auth",
        ],
      },
    },
    "admin/auth/social/login": Object {
      "post": Object {
        "consumes": Array [
          "application/json",
        ],
        "description": "This operation requires an access_token gotten after a redirect from the social provider.",
        "parameters": Array [],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "500": Object {
            "description": "Server error.",
          },
        },
        "summary": "Login a admin-user via a social provider.",
        "tags": Array [
          "Auth",
        ],
      },
    },
    "admin/auth/social/register": Object {
      "post": Object {
        "consumes": Array [
          "application/json",
        ],
        "description": "This operation requires an access_token gotten after a redirect from the social provider.",
        "parameters": Array [],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "500": Object {
            "description": "Server error.",
          },
        },
        "summary": "Register a admin-user via a social provider.",
        "tags": Array [
          "Auth",
        ],
      },
    },
    "admin/auth/two-factor/disable": Object {
      "post": Object {
        "consumes": Array [
          "application/json",
        ],
        "parameters": Array [],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "500": Object {
            "description": "Server error.",
          },
        },
        "summary": "Disable two factor authentication for an existing admin-user.",
        "tags": Array [
          "Auth",
        ],
      },
    },
    "admin/auth/two-factor/enable": Object {
      "post": Object {
        "consumes": Array [
          "application/json",
        ],
        "parameters": Array [],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "500": Object {
            "description": "Server error.",
          },
        },
        "summary": "Enable two factor authentication for an existing admin-user.",
        "tags": Array [
          "Auth",
        ],
      },
    },
    "admin/auth/two-factor/enable/confirm": Object {
      "post": Object {
        "consumes": Array [
          "application/json",
        ],
        "description": "This endpoint confirms enabling 2fa for an account. A previous call to /admin/auth/two-factor/enable is required to generate a 2fa secret for the admin-user's account.",
        "parameters": Array [],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "500": Object {
            "description": "Server error.",
          },
        },
        "summary": "Confirm enable two factor authentication for an existing admin-user.",
        "tags": Array [
          "Auth",
        ],
      },
    },
    "admin/auth/verification/resend": Object {
      "post": Object {
        "consumes": Array [
          "application/json",
        ],
        "parameters": Array [],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "500": Object {
            "description": "Server error.",
          },
        },
        "summary": "Resend verification email to admin-user email.",
        "tags": Array [
          "Auth",
        ],
      },
    },
  },
  "securityDefinitions": Object {
    "Bearer": Object {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
    },
  },
  "swagger": "2.0",
  "tags": Array [
    Object {
      "name": "Tags",
    },
    Object {
      "name": "Comments",
    },
    Object {
      "name": "Users",
    },
    Object {
      "name": "Posts",
    },
    Object {
      "name": "Reactions",
    },
  ],
}
`;
